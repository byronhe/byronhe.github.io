<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Tech Ideas</title>
    <link>https://blog.helong.info/categories/linux/</link>
    <description>Recent content in Linux on Tech Ideas</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 20 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.helong.info/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>构造最短程序打印自身的 MD5</title>
      <link>https://blog.helong.info/post/shortest-print-self-md5-contest/</link>
      <pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.helong.info/post/shortest-print-self-md5-contest/</guid>
      <description>&lt;h2 id=&#34;一介绍&#34;&gt;一，介绍&lt;/h2&gt;
&lt;p&gt;比赛题目很简单：构造一个程序，在 stdout 上打印出自身的 MD5，程序越短越好。按最终程序文件大小字节数排名，文件越小，排名越靠前。
只能使用 ld-linux-x86-64.so, libc.so, libdl.so, libgcc_s.so, libm.so, libstdc++.so 。
禁止了 socket, shmget, fork, execvc 等 syscall 。&lt;/p&gt;
&lt;p&gt;汇编高手如云，本人只做到 752 字节，只拿到 27 名。
不过基本是纯 C 实现，没有动用汇编。
但忙活好几天，学到不少东西，也有苦劳，还是值得记录一下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>基于 ElasticSearch 开发垂直搜索系统</title>
      <link>https://blog.helong.info/post/elasticsearch-dev-arch/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.helong.info/post/elasticsearch-dev-arch/</guid>
      <description>&lt;h2 id=&#34;一背景介绍&#34;&gt;一，背景介绍&lt;/h2&gt;
&lt;p&gt;ElasticSearch 是由 Lucene 包装上分布式复制一致性算法等附加功能，构成的开源搜索引擎系统。&lt;/p&gt;
&lt;p&gt;近两年在业界热度大增，主要有 3 种应用场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;全文搜索引擎&lt;/li&gt;
&lt;li&gt;NOSQL 数据库&lt;/li&gt;
&lt;li&gt;日志分析数据库 ELK&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;很多垂直领域搜索需求，都可以基于 ElasticSearch 来设计架构。&lt;/p&gt;
&lt;p&gt;ElasticSearch 能大幅度提升相关业务的迭代开发速度，实现类似 sql 数据库增删改查一样的快速开发。
并在相对高 qps 的在线业务中，保证毫秒级的延迟，提供极高的可用性和稳定性。&lt;/p&gt;
&lt;p&gt;经过持续的研读官方文档，调研业界经验，并在实践中应用反思后，总结出一套架构方案。供参考，欢迎意见建议。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>怎样让 C&#43;&#43; 中 throw exception 产生的 coredump 带上栈</title>
      <link>https://blog.helong.info/post/cpp-throw-coredump-with-backtrace/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.helong.info/post/cpp-throw-coredump-with-backtrace/</guid>
      <description>&lt;h1 id=&#34;1-问题&#34;&gt;1. 问题&lt;/h1&gt;
&lt;p&gt;一个 C++ 程序，如果 throw 了 exception ，但是又没有 catch，那么一般会产生 coredump，
问题是，在 gcc 4.x 版本产生的 coredump 文件中，&lt;em&gt;没有 throw 时候的堆栈信息&lt;/em&gt;，导致不知道是哪里 throw 的，没法查问题。&lt;/p&gt;
&lt;p&gt;原因是 gcc 4.x 的 /libstdc++-v3/src/c++11/thread.cc:92 里面有个 catch(&amp;hellip;)，所以 stack unwind 了，就没了 throw 时候的 stack 。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;execute_native_thread_routine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;   
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(...){&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;terminate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://abcdabcd987.com/libstdc++-bug/&#34;&gt;https://abcdabcd987.com/libstdc++-bug/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个解决办法是可以升级 GCC 7 ，或者可以用更简单的办法：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用 abstract unix socket 实现进程单实例运行</title>
      <link>https://blog.helong.info/post/2020/03/03/abstract-unix-socket-single-instance/</link>
      <pubDate>Tue, 03 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.helong.info/post/2020/03/03/abstract-unix-socket-single-instance/</guid>
      <description>&lt;h2 id=&#34;一问题背景&#34;&gt;一，问题背景&lt;/h2&gt;
&lt;p&gt;很多时候，我们需要&lt;strong&gt;确保进程只有一个实例运行&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;有几种方法：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/2964391/preventing-multiple-process-instances-on-linux&#34;&gt;http://stackoverflow.com/questions/2964391/preventing-multiple-process-instances-on-linux&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/5339200/how-to-create-a-single-instance-application-in-c-or-c&#34;&gt;http://stackoverflow.com/questions/5339200/how-to-create-a-single-instance-application-in-c-or-c&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/qtproject/qt-solutions/tree/master/qtsingleapplication/src&#34;&gt;https://github.com/qtproject/qt-solutions/tree/master/qtsingleapplication/src&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;比较常规的做法，是对一个文件加文件锁 flock，比如对 pid 文件 flock( LOCK_EX|LOCK_NB )&lt;/p&gt;
&lt;p&gt;但是这种方法有些弊端：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果文件被 mv 或者 rm，是会被绕过的。&lt;/li&gt;
&lt;li&gt;如果磁盘故障比如磁盘满，目录没有写权限，会失败。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;二abstract-namespace-unix-socket&#34;&gt;二，abstract namespace unix socket&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://linux.die.net/man/7/unix&#34;&gt;http://linux.die.net/man/7/unix&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;unix socket 有3种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于文件的&lt;/li&gt;
&lt;li&gt;socketpair 创建的，匿名的&lt;/li&gt;
&lt;li&gt;abstract namespace 的，Linux特有&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Linux 下， AF_UNIX socket 支持一种特殊的
abstract namespace unix socket 。&lt;/p&gt;
&lt;p&gt;相比 普通的基于文件系统的 unix socket，abstract namespace unix socket ：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;没有磁盘文件&lt;/li&gt;
&lt;li&gt;进程挂了以后自动删除，无残留文件&lt;/li&gt;
&lt;li&gt;无需担心与 文件系统上的文件冲突，不需要关心文件系统上的绝对路径是否存在的问题&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Proxygen http2 代码分析</title>
      <link>https://blog.helong.info/post/proxygen-http2-code-analysis/</link>
      <pubDate>Wed, 08 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.helong.info/post/proxygen-http2-code-analysis/</guid>
      <description>&lt;p&gt;Proxygen 的整体架构
&lt;img src=&#34;https://raw.githubusercontent.com/facebook/proxygen/master/CoreProxygenArchitecture.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;一个 HTTPSession 对应一个 tcp 连接。&lt;/p&gt;
&lt;p&gt;HTTPSession 中包含HTTPCodec ，HTTPCodec用来在 HTTPMessage(Request/Response) 和 字节流之间做转换（就是解析/序列化）。&lt;/p&gt;
&lt;p&gt;一个 HTTPTransaction 对应一个 HTTP2  的Stream ，也就是一次 Req/Resp
Handler 是业务逻辑处理的基类。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TrafficServer http2 代码分析</title>
      <link>https://blog.helong.info/post/trafficserver-http2-code-analysis/</link>
      <pubDate>Wed, 08 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.helong.info/post/trafficserver-http2-code-analysis/</guid>
      <description>&lt;p&gt;TrafficServer 是Apache基金会的 HTTP/HTTP2 代理服务器。&lt;/p&gt;
&lt;p&gt;TrafficServer 的 HTTP2 部分主要的代码在 :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;trafficserver/proxy/http2/HTTP2.h, HTTP2.cc&lt;/li&gt;
&lt;li&gt;trafficserver/proxy/http2/Http2Stream.h, Http2Stream.cc&lt;/li&gt;
&lt;li&gt;trafficserver/proxy/http2/Http2ClientSession.h, Http2ClientSession.cc&lt;/li&gt;
&lt;li&gt;trafficserver/proxy/http2/Http2ConnectionState.h, Http2ConnectionState.cc&lt;/li&gt;
&lt;li&gt;trafficserver/proxy/http2/ Http2DependencyTree.h, Http2DependencyTree.cc&lt;/li&gt;
&lt;li&gt;trafficserver/proxy/http2/HPACK.h, HPACK.cc&lt;/li&gt;
&lt;li&gt;trafficserver/proxy/http2/HuffmanCodec.h, HuffmanCodec.cc&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Linux LoadAvg 编程比赛</title>
      <link>https://blog.helong.info/post/2015/08/13/linux-loadavg-competation/</link>
      <pubDate>Thu, 13 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.helong.info/post/2015/08/13/linux-loadavg-competation/</guid>
      <description>&lt;h2 id=&#34;问题背景&#34;&gt;问题背景&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://timyang.net/programming/load-average/&#34;&gt;https://timyang.net/programming/load-average/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2015.08.13 高可用架构群 Load 编程比赛，Tim 在群征集一段代码使 load average 最高&lt;/p&gt;
&lt;p&gt;多线程写几个 while 循环的方法太 trivial 了，就不提了。&lt;/p&gt;
&lt;p&gt;下面是 byronhe 的两个解：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>博客迁移到octopress</title>
      <link>https://blog.helong.info/post/2014/03/24/move-to-octopress/</link>
      <pubDate>Mon, 24 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.helong.info/post/2014/03/24/move-to-octopress/</guid>
      <description>wordpress的编辑器混淆了 结构 和 表现 而markdown，类似latex，结构和表现分离，更符合我的偏好。 在vim里面写博客，更能激起人</description>
    </item>
    
    <item>
      <title>一个使用KuaiPan备份linux服务器的脚本</title>
      <link>https://blog.helong.info/post/2014/02/08/kuaipan-backup-script/</link>
      <pubDate>Sat, 08 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.helong.info/post/2014/02/08/kuaipan-backup-script/</guid>
      <description>近日需要给服务器做备份，在网上找到了一个现成的金山快盘的api：https://github.com/deren/python-kuaipa</description>
    </item>
    
    <item>
      <title>a http proxy script</title>
      <link>https://blog.helong.info/post/2013/11/18/a-http-proxy-script/</link>
      <pubDate>Mon, 18 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.helong.info/post/2013/11/18/a-http-proxy-script/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 #!/usr/local/bin/python # -*- coding: utf-8 -*- import base64 import select import socket import httplib</description>
    </item>
    
    <item>
      <title>libpcap试玩</title>
      <link>https://blog.helong.info/post/2013/08/04/libpcap-sniffer/</link>
      <pubDate>Sun, 04 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.helong.info/post/2013/08/04/libpcap-sniffer/</guid>
      <description>&lt;p&gt;libpcap驱动了tcpdump,和wireshark这类抓包工具.提供了高度灵活的包过滤语言. 据wikipedia,高性能的包过滤最早是在bsd上作为一个问题被解决,被称为bpf,在内核实现了一个解释器,进行包匹配,用户态提供一个字符设备, linux作为后来者,支持与bsd基本相同的packet filter,称为lpf,不同的是,linux是通过在一个raw socket来支持包过滤的,通过setsockopt来SO_ATTACH_FILTER,挂载过滤器. strace 可知,libpcap实际上进行了如下syscall:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;socket(PF_PACKET, SOCK_RAW, 768) = 59 
setsockopt(59, SOL_SOCKET, SO_ATTACH_FILTER, &amp;#34;\1\0\0\0\0\0\0\0\250\327Vc\375\177\0\0&amp;#34;, 16) = 0
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;libpcap的api文档和demo代码可以参见&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.tcpdump.org/pcap3_man.html&#34;&gt;http://www.tcpdump.org/pcap3_man.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.tcpdump.org/sniffex.c&#34;&gt;http://www.tcpdump.org/sniffex.c&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考文档了demo,我写了一个小的sniffer,&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【旧代码】mysql备份的shell脚本</title>
      <link>https://blog.helong.info/post/2011/11/15/mysql-backup-script/</link>
      <pubDate>Tue, 15 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.helong.info/post/2011/11/15/mysql-backup-script/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/bin/sh bk_to=&amp;#34;/var/mysql-backup-`date +%Y-%m-%d-%k-%M-%S |tr -d &amp;#39; &amp;#39;`&amp;#34; user_name=&amp;#34;root&amp;#34; user_pw=&amp;#34;dev&amp;#34; sql=&amp;#34; flush tables with read lock; system cp -pR /var/lib/mysql $bk_to; unlock tables; &amp;#34; mysql -u $user_name -p$user_pw -e &amp;#34;$sql&amp;#34; echo $sql tar cjf $bk_to.bz2 $bk_to rm -rf $bk_to</description>
    </item>
    
    <item>
      <title>一个用inotify监控apache的脚本</title>
      <link>https://blog.helong.info/post/2010/08/29/apache-monitor-inotify-script/</link>
      <pubDate>Sun, 29 Aug 2010 00:00:00 +0000</pubDate>
      
      <guid>https://blog.helong.info/post/2010/08/29/apache-monitor-inotify-script/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/bin/bash #Author:windydays #Date : 2010/8/29 #用于监控apache，如果退出就自动重启apache，原理是在如果apach</description>
    </item>
    
    <item>
      <title>apache的安全增强配置(使用mod_chroot,mod_security)</title>
      <link>https://blog.helong.info/post/2010/08/17/apache-security-enhancement-using-mod_chroot-mod_security/</link>
      <pubDate>Tue, 17 Aug 2010 00:00:00 +0000</pubDate>
      
      <guid>https://blog.helong.info/post/2010/08/17/apache-security-enhancement-using-mod_chroot-mod_security/</guid>
      <description>LAMP环境的一般入侵，大致经过sql注入，上传webshell，本地提权至root，安装rootkit等步骤。 采用如下的配置，mod_ch</description>
    </item>
    
  </channel>
</rss>