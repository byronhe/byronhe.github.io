<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Tech Ideas]]></title>
  <link href="https://blog.helong.info//blog/categories/java/atom.xml" rel="self"/>
  <link href="https://blog.helong.info//"/>
  <updated>2019-09-22T22:24:22+08:00</updated>
  <id>https://blog.helong.info//</id>
  <author>
    <name><![CDATA[byronhe]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jdbc使用DataSource连接mysql,postgresql,oracle的代码]]></title>
    <link href="https://blog.helong.info//2011/11/15/jdbc%e4%bd%bf%e7%94%a8datasource%e8%bf%9e%e6%8e%a5mysqlpostgresqloracle%e7%9a%84%e4%bb%a3%e7%a0%81/"/>
    <updated>2011-11-15T00:00:00+08:00</updated>
    <id>https://blog.helong.info//2011/11/15/jdbc%e4%bd%bf%e7%94%a8datasource%e8%bf%9e%e6%8e%a5mysqlpostgresqloracle%e7%9a%84%e4%bb%a3%e7%a0%81</id>
    <content type="html"><![CDATA[<pre><code class="java">import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;

import org.postgresql.ds.PGSimpleDataSource;

import oracle.jdbc.pool.OracleDataSource;

import com.mysql.jdbc.jdbc2.optional.MysqlDataSource;

public class DBConnection {

    /**
     * @param args
     * @throws SQLException
     */
    public static void main(String[] args) throws SQLException {
        // TODO Auto-generated method stub
        MysqlDataSource mysqlDataSource = new MysqlDataSource();
        // mysqlDataSource.setPassword("dev");
        // mysqlDataSource.setUser("dev");
        mysqlDataSource
                .setURL("jdbc:mysql://localhost/forJava?user=dev&amp;#038;password=dev");
        Connection conn = mysqlDataSource.getConnection();
        Statement stmt = conn.createStatement();
        stmt.executeUpdate("create table if not exists web\n" + "(\n"
                + "        id int not null primary key,\n" + "        name varchar(100),\n"
                + "        created timestamp,\n" + "        content blob\n" + ");\n" + "");
        for (int i = 0; i &amp;lt; 1; i++) {
            stmt.executeUpdate("insert into web (name,content) values ('HL','frgertrhrtnthtohioh')");
        }
        showResultSet(stmt.executeQuery("select * from web limit 10"));

        // Driver driver = new com.mysql.jdbc.Driver();
        // driver.connect("jdbc:mysql://localhost/forJava?user=dev&amp;#038;password=dev",
        // null);

        PGSimpleDataSource pgSimpleDataSource = new PGSimpleDataSource();
        pgSimpleDataSource.setServerName("localhost");
        pgSimpleDataSource.setDatabaseName("dev");
        pgSimpleDataSource.setUser("dev");
        pgSimpleDataSource.setPassword("dev");
        conn = pgSimpleDataSource.getConnection();
        // conn =
        // DriverManager.getConnection("jdbc:postgresql://localhost/test",
        // "dev", "dev");
        showResultSet(conn.createStatement().executeQuery("select * from cities"));

        OracleDataSource oraDataSource = new OracleDataSource();
        // oraDataSource.setServerName("127.0.0.1");
        // oraDataSource.setDatabaseName("HR");
        // oraDataSource.setUser("HR");
        // oraDataSource.setPassword("HR");
        oraDataSource.setURL("jdbc:oracle:thin:hr/hr@//localhost:1521/XE");
        conn = oraDataSource.getConnection();
        stmt = conn.createStatement();
        stmt.execute("select * from tab");
        showResultSet(stmt.getResultSet());
        stmt.execute("select * from jobs");
        showResultSet(stmt.getResultSet());
        stmt.execute("select * from DEPARTMENTS");
        showResultSet(stmt.getResultSet());
    }

    static void showResultSet(ResultSet resultSet) throws SQLException {
        ResultSetMetaData resultSetMetaData = resultSet.getMetaData();
        int num = resultSetMetaData.getColumnCount();
        while (resultSet.next()) {
            for (int i = 1; i &amp;lt;= num; i++) {
                System.out.print(resultSetMetaData.getCatalogName(i) + " "
                        + resultSet.getString(i));
            }
            System.out.println();
        }
    }
}
</code></pre>

<p>呃，在自己电脑上同时安装了mysql, postgresql,oracle,db2,sqlite的人是不是很蛋疼？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java多线程网页下载代码]]></title>
    <link href="https://blog.helong.info//2011/11/15/java%e5%a4%9a%e7%ba%bf%e7%a8%8b%e7%bd%91%e9%a1%b5%e4%b8%8b%e8%bd%bd%e4%bb%a3%e7%a0%81/"/>
    <updated>2011-11-15T00:00:00+08:00</updated>
    <id>https://blog.helong.info//2011/11/15/java%e5%a4%9a%e7%ba%bf%e7%a8%8b%e7%bd%91%e9%a1%b5%e4%b8%8b%e8%bd%bd%e4%bb%a3%e7%a0%81</id>
    <content type="html"><![CDATA[<p>小项目，练手的。</p>

<p>1.使用了java.util.concurrent包里的线程池，可以飙升到满带宽，在100M带宽上，可以达到10MB/s。</p>

<p>2.使用了java.nio里的channels，性能比自己缓冲有一些提高。</p>

<pre><code class="java">import java.io.FileOutputStream;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;
import java.nio.channels.Channels;
import java.nio.channels.FileChannel;
import java.nio.channels.ReadableByteChannel;
import java.util.Calendar;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class HttpDownloader implements Callable {
    URLConnection connection;
    FileChannel outputChann;
    public static volatile int count = 0;

    public static void main(String[] args) throws Exception {

        ExecutorService poll = Executors.newFixedThreadPool(100);

        for (int i = 0; i &amp;lt; 100; i++) {
            Calendar now = Calendar.getInstance();
            String fileName = "../data/" + now.get(Calendar.YEAR) + "年"
                    + (now.get(Calendar.MONTH) + 1) + "月"
                    + now.get(Calendar.DAY_OF_MONTH) + "日--" + i + ".txt";
            poll.submit(new HttpDownloader("http://www.sina.com",
                    (new FileOutputStream(fileName)).getChannel()));
        }

        poll.shutdown();

        long start = System.currentTimeMillis();
        while (!poll.isTerminated()) {
            Thread.sleep(1000);
            System.out.println("已运行"
                    + ((System.currentTimeMillis() - start) / 1000) + "秒，"
                    + HttpDownloader.count + "个任务还在运行");
        }
    }

    public HttpDownloader(String url, FileChannel fileChannel) throws Exception {
        synchronized (HttpDownloader.class) {
            count++;
        }
        connection = (new URL(url)).openConnection();
        this.outputChann = fileChannel;
    }

    @Override
    public String call() throws Exception {
        connection.connect();
        InputStream inputStream = connection.getInputStream();
        ReadableByteChannel rChannel = Channels.newChannel(inputStream);
        outputChann.transferFrom(rChannel, 0, Integer.MAX_VALUE);
        // System.out.println(Thread.currentThread().getName() + " completed!");
        inputStream.close();
        outputChann.close();
        synchronized (HttpDownloader.class) {
            count--;
        }
        return null;
    }
}
</code></pre>
]]></content>
  </entry>
  
</feed>
